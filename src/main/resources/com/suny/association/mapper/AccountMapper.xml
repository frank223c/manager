<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.suny.association.mapper.AccountMapper">
    <resultMap id="BaseResultMap" type="com.suny.association.entity.po.Account">
        <id property="accountId" column="account_id"/>
        <result property="accountName" column="account_name"/>
        <result property="accountPassword" column="account_password"/>
        <result property="accountPhone" column="account_phone"/>
        <result property="accountEmail" column="account_email"/>
        <result property="accountStatus" column="account_status"/>
        <!--账号角色复杂类型关联-->
        <association property="accountRoles" column="account_role_id"
                     javaType="com.suny.association.entity.po.Roles">
            <id property="roleId" column="r_role_id"/>
            <result property="description" column="r_role_name"/>
            <result property="createTime" column="r_role_create_time"/>
        </association>
        <!--复杂类型的集-->
        <collection property="accountMember" column="account_member_id" ofType="com.suny.association.entity.po.Member">
            <id property="memberId" column="m_member_id"/>
            <result property="memberName" column="m_member_name"/>
            <result property="memberClassName" column="m_member_class_name"/>
            <result property="memberSex" column="m_member_sex"/>
            <result property="memberGradeNumber" column="m_member_grade_number"/>
            <result property="memberStatus" column="m_member_status"/>
            <!--部门复杂类型关联-->
            <collection property="memberDepartment" ofType="com.suny.association.entity.po.Department">
                <id property="departmentId" column="m_d_department_id"/>
                <result property="departmentName" column="m_d_department_name"/>
            </collection>
            <!--角色复杂类型关联-->
            <collection property="memberRoles" ofType="com.suny.association.entity.po.MemberRoles">
                <id property="memberRoleId" column="m_r_member_role_id"/>
                <result property="memberRoleName" column="m_r_member_role_name"/>
            </collection>
            <!--//这里有问题,这里会引起StackOverFlow的问题,因为管理员也有管理员,所以无限递归-->
            <!--协会成员对应的管理员复杂类型集合-->
            <!-- <association property="memberManager" column="member_manager_id"
                          javaTycom.suny.association.entitytypojo.po.Member"
                          resultMap="BaseResultMap"/>-->
        </collection>
    </resultMap>


    <!--===================这里开始是方法====================-->

    <select id="selectMemberReference" parameterType="integer" resultMap="BaseResultMap">
        SELECT
            a.account_id,
            a.`account_name`,
            a.`account_phone`,
            a.account_member_id,
            a.account_email,
            a.account_phone,
            a.account_status,
            m.member_id            AS m_member_id,
            m.member_name          AS m_member_name,
            m.member_class_name    AS m_member_class_name,
            m.member_sex           AS m_member_sex,
            m.member_grade_number  AS m_member_grade_number,
            m.member_manager_id    AS m_member_manager_id,
            m.member_department_id AS m_member_manager_id,
            m.member_status        AS m_member_status,
            m.member_role_id       AS m_member_role_id,
            mr.member_role_id      AS m_r_member_role_id,
            mr.member_role_name    AS m_r_member_role_name,
            d.department_id        AS m_d_department_id,
            d.department_name      AS m_d_department_name
        FROM account a
            LEFT JOIN
            member m
                ON m.`member_id` = a.`account_member_id`
            LEFT JOIN
            member_roles mr
                ON mr.`member_role_id` = m.`member_role_id`
            LEFT JOIN department d
                ON d.`department_id` = m.`member_department_id`
        WHERE a.`account_id` = #{memberId}
    </select>


    <select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
            a.account_id,
            a.account_name,
            a.account_status,
            a.account_member_id,
            a.account_role_id,
            r.role_id          AS r_role_id,
            r.role_description AS r_role_name,
            m.member_id        AS m_member_id,
            m.member_name      AS m_member_name
        FROM account a
            JOIN roles r
                ON a.account_role_id = r.role_id
            JOIN member m ON a.account_member_id = m.member_id
        WHERE a.account_id = #{accountId};
    </select>

    <!--=============================================================================================-->


    <insert id="insert" parameterType="com.suny.association.entity.po.Account">
        INSERT INTO account
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="accountId != null">account_id ,</if>
            <if test="accountName != null">account_name ,</if>
            <if test="accountPassword != null">account_password ,</if>
            <if test="accountPhone != null">account_phone ,</if>
            <if test="accountEmail != null">account_email,</if>
            <if test="accountStatus != null">account_status,</if>
            <if test="accountMember != null">account_member_id,</if>
            <if test="accountRoles != null">account_role_id,</if>
        </trim>
        <trim prefix="values(" suffix=")" suffixOverrides=",">
            <if test="accountId != null">#{accountId,jdbcType=BIGINT},</if>
            <if test="accountName != null">#{accountName,jdbcType=VARCHAR},</if>
            <if test="accountPassword != null">#{accountPassword,jdbcType=VARCHAR},</if>
            <if test="accountPhone != null">#{accountPhone,jdbcType=BIGINT},</if>
            <if test="accountEmail != null">#{accountEmail,jdbcType=VARCHAR},</if>
            <if test="accountStatus != null">#{accountStatus,jdbcType=BOOLEAN},</if>
            <if test="accountMember != null">#{accountMember.memberId,jdbcType=BIGINT},</if>
            <if test="accountRoles != null">#{accountRoles.roleId,jdbcType=INTEGER},</if>
        </trim>
    </insert>

    <insert id="insertAndReturnId" parameterType="com.suny.association.entity.po.Account" useGeneratedKeys="true"
            keyProperty="accountId">
        INSERT INTO account
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="accountId != null">account_id ,</if>
            <if test="accountName != null">account_name ,</if>
            <if test="accountPassword != null">account_password ,</if>
            <if test="accountPhone != null">account_phone ,</if>
            <if test="accountEmail != null">account_email,</if>
            <if test="accountStatus != null">account_status,</if>
            <if test="accountMember != null">account_member_id,</if>
            <if test="accountRoles != null">account_role_id,</if>
        </trim>
        <trim prefix="values(" suffix=")" suffixOverrides=",">
            <if test="accountId != null">#{accountId,jdbcType=BIGINT},</if>
            <if test="accountName != null">#{accountName,jdbcType=VARCHAR},</if>
            <if test="accountPassword != null">#{accountPassword,jdbcType=VARCHAR},</if>
            <if test="accountPhone != null">#{accountPhone,jdbcType=BIGINT},</if>
            <if test="accountEmail != null">#{accountEmail,jdbcType=VARCHAR},</if>
            <if test="accountStatus != null">#{accountStatus,jdbcType=BOOLEAN},</if>
            <if test="accountMember != null">#{accountMember.memberId,jdbcType=BIGINT},</if>
            <if test="accountRoles != null">#{accountRoles.roleId,jdbcType=INTEGER},</if>
        </trim>
    </insert>
    <!--批量插入简单的账号,仅限于Excel文件上传的-->
    <insert id="insertBatchSimpleAccount" parameterType="java.util.List" keyProperty="accountId"
            useGeneratedKeys="true">
        INSERT INTO account(
        account_name ,
        account_member_id
        )
        VALUES
        <foreach collection="list" item="account" separator="," index="index">
            <trim prefix="(" suffix=")">
                #{account.accountName},
                #{account.accountMember.memberId}
            </trim>
        </foreach>
    </insert>

    <update id="update" parameterType="com.suny.association.entity.po.Account">
        UPDATE account
        <trim prefix="set" suffixOverrides=",">
            <if test="accountName != null">account_name =#{accountName},</if>
            <if test="accountPassword != null">account_password=#{accountPassword},</if>
            <if test="accountPhone != null">account_phone =#{accountPhone},</if>
            <if test="accountEmail != null">account_email =#{accountEmail},</if>
            <if test="accountStatus != null">account_status =#{accountStatus},</if>
            <if test="accountMember != null">account_member_id =#{accountMember.memberId},</if>
            <if test="accountRoles != null">account_role_id =#{accountRoles.roleId},</if>
        </trim>
        WHERE account_id = #{accountId}
    </update>

    <update id="changePassword">
        UPDATE account
        SET account_password = #{newPassword}
        WHERE account_id = #{accountId}
    </update>

    <select id="queryByMemberId" parameterType="int" resultMap="BaseResultMap">
        SELECT
            a.account_id,
            a.account_name,
            a.account_phone,
            a.account_email,
            a.account_status,
            a.account_member_id,
            a.account_role_id,
            r.role_id          AS r_role_id,
            r.role_description AS r_role_name,
            m.member_id        AS m_member_id,
            m.member_name      AS m_member_name
        FROM account a
            JOIN roles r ON a.account_role_id = r.role_id
            JOIN member m ON a.account_member_id = m.member_id
        WHERE account_member_id = #{memberId}
    </select>

    <select id="queryQuoteByAccountId" parameterType="Long" resultMap="BaseResultMap">
        SELECT
            a.account_id,
            a.account_member_id
        FROM account AS a
        WHERE a.account_id = #{accountId,jdbcType=BIGINT}
    </select>

    <select id="queryQuoteByMemberId" parameterType="Long" resultMap="BaseResultMap">
        SELECT
            a.account_id,
            a.account_member_id,
            m.member_id        AS m_member_id,
            m.member_name      AS m_member_name
        FROM account AS a
            JOIN member m ON a.account_member_id = m.member_id
        WHERE a.account_member_id = #{memberId}
    </select>


    <select id="selectByName" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
            a.account_id,
            a.account_name,
            a.account_phone,
            a.account_email,
            a.account_status,
            a.account_password,
            a.account_member_id,
            a.account_role_id,
            r.role_id          AS r_role_id,
            r.role_description AS r_role_name,
            m.member_id        AS m_member_id,
            m.member_name      AS m_member_name
        FROM account a
            JOIN roles r ON a.account_role_id = r.role_id
            JOIN member m ON a.account_member_id = m.member_id
        WHERE a.account_name = #{name};
    </select>


    <delete id="deleteById" parameterType="long">
        DELETE FROM account
        WHERE account_id = #{accountId}
    </delete>


    <!--<select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
        <include refid="BaseSelectFields"/>
        FROM account
        WHERE account_id = #{accountId,jdbcType=BIGINT}
    </select>-->


    <select id="queryByPhone" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
            a.account_id,
            a.account_name,
            a.account_phone,
            a.account_email,
            a.account_status,
            a.account_member_id,
            a.account_role_id,
            r.role_id          AS r_role_id,
            r.role_description AS r_role_name,
            m.member_id        AS m_member_id,
            m.member_name      AS m_member_name
        FROM account a
            JOIN roles r ON a.account_role_id = r.role_id
            JOIN member m ON a.account_member_id = m.member_id
        WHERE a.account_phone = #{phoneNumber}
    </select>

    <select id="queryByMail" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
            a.account_id,
            a.account_name,
            a.account_phone,
            a.account_email,
            a.account_status,
            a.account_member_id,
            a.account_role_id,
            r.role_id          AS r_role_id,
            r.role_description AS r_role_name,
            m.member_id        AS m_member_id,
            m.member_name      AS m_member_name
        FROM account a
            JOIN roles r ON a.account_role_id = r.role_id
            JOIN member m ON a.account_member_id = m.member_id
        WHERE a.account_email = #{email}
    </select>


    <select id="selectAll"  resultMap="BaseResultMap">
        SELECT
            a.account_id,
            a.account_name,
            a.account_phone,
            a.account_email,
            a.account_status,
            a.account_member_id,
            a.account_role_id,
            r.role_id          AS r_role_id,
            r.role_description AS r_role_name,
            m.member_id        AS m_member_id,
            m.member_name      AS m_member_name
        FROM account a
            JOIN roles r ON a.account_role_id = r.role_id
            JOIN member m ON a.account_member_id = m.member_id
    </select>


    <select id="selectByParam" parameterType="hashmap" resultMap="BaseResultMap">
        SELECT
        a.account_id,
        a.account_name,
        a.account_phone,
        a.account_email,
        a.account_status,
        a.account_member_id,
        a.account_role_id,
        r.role_id          AS r_role_id,
        r.role_description AS r_role_name,
        m.member_id        AS m_member_id,
        m.member_name      AS m_member_name
        FROM account a
        JOIN roles r ON a.account_role_id = r.role_id
        JOIN member m ON a.account_member_id = m.member_id
        <where>
            1=1
            <if test="entity.accountName != null">
                and account_name =#{entity.accountName}
            </if>
            <if test="entity.accountPhone != null">
                and account_phone =#{entity.accountPhone}
            </if>
            <if test="entity.accountEmail != null">
                and account_email =#{entity.accountEmail}
            </if>
        </where>
        LIMIT #{offset},#{limit}
    </select>
    <select id="selectCountByParam" parameterType="hashmap" resultType="int">
        SELECT
         count(*)
        FROM account a
        <where>
            1=1
            <if test="accountName != null">
                and account_name =#{accountName}
            </if>
            <if test="accountPhone != null">
                and account_phone =#{accountPhone}
            </if>
            <if test="accountEmail != null">
                and account_email =#{accountEmail}
            </if>
        </where>
    </select>

    <select id="selectCount" resultType="int">
        SELECT count(*)
        FROM account;
    </select>


</mapper>






